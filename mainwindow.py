# -*- coding: utf-8 -*-

################################################################################
## Form generated from reading UI file 'mainwindowbaZSAn.ui'
##
## Created by: Qt User Interface Compiler version 5.15.2
##
## WARNING! All changes made in this file will be lost when recompiling UI file!
################################################################################

from PySide2.QtCore import *
from PySide2.QtGui import *
from PySide2.QtWidgets import *

from gridgraphicsview import GridGraphicsView

import res_rc

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        if not MainWindow.objectName():
            MainWindow.setObjectName(u"MainWindow")
        MainWindow.resize(953, 670)
        sizePolicy = QSizePolicy(QSizePolicy.Minimum, QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMinimumSize(QSize(808, 670))
        MainWindow.setMaximumSize(QSize(2000, 2000))
        MainWindow.setSizeIncrement(QSize(1, 1))
        icon = QIcon()
        icon.addFile(u":/icons/antialias_Icon.png", QSize(), QIcon.Normal, QIcon.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setToolButtonStyle(Qt.ToolButtonIconOnly)
        MainWindow.setUnifiedTitleAndToolBarOnMac(True)
        self.actionCreate_new_frame = QAction(MainWindow)
        self.actionCreate_new_frame.setObjectName(u"actionCreate_new_frame")
        icon1 = QIcon()
        icon1.addFile(u":/icons/list-add.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionCreate_new_frame.setIcon(icon1)
        self.actionCreate_new_frame.setShortcutContext(Qt.ApplicationShortcut)
        self.actionExit = QAction(MainWindow)
        self.actionExit.setObjectName(u"actionExit")
        icon2 = QIcon()
        icon2.addFile(u":/icons/System-log-out-2.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionExit.setIcon(icon2)
        self.actionExit.setShortcutContext(Qt.ApplicationShortcut)
        self.actionLoad_BLM = QAction(MainWindow)
        self.actionLoad_BLM.setObjectName(u"actionLoad_BLM")
        icon3 = QIcon()
        icon3.addFile(u":/icons/document-open.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionLoad_BLM.setIcon(icon3)
        self.actionLoad_BLM.setShortcutContext(Qt.ApplicationShortcut)
        self.actionLoad_BLM.setAutoRepeat(False)
        self.actionDuplicate_frame = QAction(MainWindow)
        self.actionDuplicate_frame.setObjectName(u"actionDuplicate_frame")
        icon4 = QIcon()
        icon4.addFile(u":/icons/edit-copy.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionDuplicate_frame.setIcon(icon4)
        self.actionDuplicate_frame.setShortcutContext(Qt.ApplicationShortcut)
        self.actionPlayStop = QAction(MainWindow)
        self.actionPlayStop.setObjectName(u"actionPlayStop")
        self.actionPlayStop.setEnabled(False)
        icon5 = QIcon()
        icon5.addFile(u":/icons/media-playback-start.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionPlayStop.setIcon(icon5)
        self.actionPlayStop.setShortcutContext(Qt.ApplicationShortcut)
        self.actionPlayStop.setAutoRepeat(False)
        self.actionNew = QAction(MainWindow)
        self.actionNew.setObjectName(u"actionNew")
        icon6 = QIcon()
        icon6.addFile(u":/icons/document-new.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionNew.setIcon(icon6)
        self.actionNew.setShortcutContext(Qt.ApplicationShortcut)
        self.actionNew.setAutoRepeat(False)
        self.actionSave_as = QAction(MainWindow)
        self.actionSave_as.setObjectName(u"actionSave_as")
        icon7 = QIcon()
        icon7.addFile(u":/icons/document-save-as.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionSave_as.setIcon(icon7)
        self.actionSave_as.setShortcutContext(Qt.ApplicationShortcut)
        self.actionSave_as.setAutoRepeat(False)
        self.actionGo_to_previous_frame = QAction(MainWindow)
        self.actionGo_to_previous_frame.setObjectName(u"actionGo_to_previous_frame")
        self.actionGo_to_previous_frame.setEnabled(False)
        icon8 = QIcon()
        icon8.addFile(u":/icons/go-previous.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionGo_to_previous_frame.setIcon(icon8)
        self.actionGo_to_previous_frame.setShortcutContext(Qt.ApplicationShortcut)
        self.actionGo_to_next_frame = QAction(MainWindow)
        self.actionGo_to_next_frame.setObjectName(u"actionGo_to_next_frame")
        self.actionGo_to_next_frame.setEnabled(False)
        icon9 = QIcon()
        icon9.addFile(u":/icons/go-next.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionGo_to_next_frame.setIcon(icon9)
        self.actionGo_to_next_frame.setShortcutContext(Qt.ApplicationShortcut)
        self.actionSelect_all = QAction(MainWindow)
        self.actionSelect_all.setObjectName(u"actionSelect_all")
        icon10 = QIcon()
        icon10.addFile(u":/icons/view-grid-all.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionSelect_all.setIcon(icon10)
        self.actionSelect_all.setShortcutContext(Qt.ApplicationShortcut)
        self.actionDeselect_all = QAction(MainWindow)
        self.actionDeselect_all.setObjectName(u"actionDeselect_all")
        icon11 = QIcon()
        icon11.addFile(u":/icons/view-grid.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionDeselect_all.setIcon(icon11)
        self.actionDeselect_all.setShortcutContext(Qt.ApplicationShortcut)
        self.actionInvert_selection = QAction(MainWindow)
        self.actionInvert_selection.setObjectName(u"actionInvert_selection")
        icon12 = QIcon()
        icon12.addFile(u":/icons/document-encrypted.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionInvert_selection.setIcon(icon12)
        self.actionInvert_selection.setShortcutContext(Qt.ApplicationShortcut)
        self.actionSelect_by_color = QAction(MainWindow)
        self.actionSelect_by_color.setObjectName(u"actionSelect_by_color")
        icon13 = QIcon()
        icon13.addFile(u":/icons/color.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionSelect_by_color.setIcon(icon13)
        self.actionSelect_by_color.setShortcutContext(Qt.ApplicationShortcut)
        self.actionUndo = QAction(MainWindow)
        self.actionUndo.setObjectName(u"actionUndo")
        self.actionUndo.setEnabled(True)
        icon14 = QIcon()
        icon14.addFile(u":/icons/edit-undo.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionUndo.setIcon(icon14)
        self.actionChoose_color = QAction(MainWindow)
        self.actionChoose_color.setObjectName(u"actionChoose_color")
        icon15 = QIcon()
        icon15.addFile(u":/icons/gnome-applications-graphics.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionChoose_color.setIcon(icon15)
        self.actionTint_selected_tiles = QAction(MainWindow)
        self.actionTint_selected_tiles.setObjectName(u"actionTint_selected_tiles")
        icon16 = QIcon()
        icon16.addFile(u":/icons/fill-color.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionTint_selected_tiles.setIcon(icon16)
        self.actionShift_left = QAction(MainWindow)
        self.actionShift_left.setObjectName(u"actionShift_left")
        icon17 = QIcon()
        icon17.addFile(u":/icons/arrow-left-double.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionShift_left.setIcon(icon17)
        self.actionShift_right = QAction(MainWindow)
        self.actionShift_right.setObjectName(u"actionShift_right")
        icon18 = QIcon()
        icon18.addFile(u":/icons/arrow-right-double.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionShift_right.setIcon(icon18)
        self.actionPlayStopDevice = QAction(MainWindow)
        self.actionPlayStopDevice.setObjectName(u"actionPlayStopDevice")
        icon19 = QIcon()
        icon19.addFile(u":/icons/media-flash.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionPlayStopDevice.setIcon(icon19)
        self.actionRandomize_selected_tiles = QAction(MainWindow)
        self.actionRandomize_selected_tiles.setObjectName(u"actionRandomize_selected_tiles")
        icon20 = QIcon()
        icon20.addFile(u":/icons/dice.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionRandomize_selected_tiles.setIcon(icon20)
        self.actionShift_content_up = QAction(MainWindow)
        self.actionShift_content_up.setObjectName(u"actionShift_content_up")
        icon21 = QIcon()
        icon21.addFile(u":/icons/arrow-up-double.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionShift_content_up.setIcon(icon21)
        self.actionShift_content_down = QAction(MainWindow)
        self.actionShift_content_down.setObjectName(u"actionShift_content_down")
        icon22 = QIcon()
        icon22.addFile(u":/icons/arrow-down-double.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionShift_content_down.setIcon(icon22)
        self.actionCopy_Selection = QAction(MainWindow)
        self.actionCopy_Selection.setObjectName(u"actionCopy_Selection")
        icon23 = QIcon()
        icon23.addFile(u":/icons/edit-copy-selection.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionCopy_Selection.setIcon(icon23)
        self.actionPaste = QAction(MainWindow)
        self.actionPaste.setObjectName(u"actionPaste")
        self.actionPaste.setEnabled(False)
        icon24 = QIcon()
        icon24.addFile(u":/icons/edit-paste.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionPaste.setIcon(icon24)
        self.actionPersist_changes = QAction(MainWindow)
        self.actionPersist_changes.setObjectName(u"actionPersist_changes")
        icon25 = QIcon()
        icon25.addFile(u":/icons/text-x-generic_with_pencil.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionPersist_changes.setIcon(icon25)
        self.actionCut_Selection = QAction(MainWindow)
        self.actionCut_Selection.setObjectName(u"actionCut_Selection")
        icon26 = QIcon()
        icon26.addFile(u":/icons/edit-cut.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionCut_Selection.setIcon(icon26)
        self.actionExport_frame = QAction(MainWindow)
        self.actionExport_frame.setObjectName(u"actionExport_frame")
        icon27 = QIcon()
        icon27.addFile(u":/icons/document-export.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionExport_frame.setIcon(icon27)
        self.actionGenerate_color_gradient = QAction(MainWindow)
        self.actionGenerate_color_gradient.setObjectName(u"actionGenerate_color_gradient")
        icon28 = QIcon()
        icon28.addFile(u":/icons/gradient.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionGenerate_color_gradient.setIcon(icon28)
        self.actionSave = QAction(MainWindow)
        self.actionSave.setObjectName(u"actionSave")
        self.actionSave.setEnabled(False)
        icon29 = QIcon()
        icon29.addFile(u":/icons/document-save.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionSave.setIcon(icon29)
        self.actionGo_to_frame = QAction(MainWindow)
        self.actionGo_to_frame.setObjectName(u"actionGo_to_frame")
        icon30 = QIcon()
        icon30.addFile(u":/icons/go-jump.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionGo_to_frame.setIcon(icon30)
        self.actionZoom_in = QAction(MainWindow)
        self.actionZoom_in.setObjectName(u"actionZoom_in")
        icon31 = QIcon()
        icon31.addFile(u":/icons/view-zoom-in.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionZoom_in.setIcon(icon31)
        self.actionZoom_out = QAction(MainWindow)
        self.actionZoom_out.setObjectName(u"actionZoom_out")
        self.actionZoom_out.setEnabled(True)
        icon32 = QIcon()
        icon32.addFile(u":/icons/view-zoom-out.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionZoom_out.setIcon(icon32)
        self.actionFit_zoom = QAction(MainWindow)
        self.actionFit_zoom.setObjectName(u"actionFit_zoom")
        icon33 = QIcon()
        icon33.addFile(u":/icons/view-zoom-fit.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionFit_zoom.setIcon(icon33)
        self.actionGenerate_function = QAction(MainWindow)
        self.actionGenerate_function.setObjectName(u"actionGenerate_function")
        icon34 = QIcon()
        icon34.addFile(u":/icons/office-chart-line.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionGenerate_function.setIcon(icon34)
        self.actionImport_from_image = QAction(MainWindow)
        self.actionImport_from_image.setObjectName(u"actionImport_from_image")
        icon35 = QIcon()
        icon35.addFile(u":/icons/document-import.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionImport_from_image.setIcon(icon35)
        self.actionRotate_right = QAction(MainWindow)
        self.actionRotate_right.setObjectName(u"actionRotate_right")
        icon36 = QIcon()
        icon36.addFile(u":/icons/object-rotate-right.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionRotate_right.setIcon(icon36)
        self.actionRotate_left = QAction(MainWindow)
        self.actionRotate_left.setObjectName(u"actionRotate_left")
        icon37 = QIcon()
        icon37.addFile(u":/icons/object-rotate-left.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionRotate_left.setIcon(icon37)
        self.actionDelete_colors = QAction(MainWindow)
        self.actionDelete_colors.setObjectName(u"actionDelete_colors")
        icon38 = QIcon()
        icon38.addFile(u":/icons/edit-delete.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionDelete_colors.setIcon(icon38)
        self.actionExport_frames = QAction(MainWindow)
        self.actionExport_frames.setObjectName(u"actionExport_frames")
        icon39 = QIcon()
        icon39.addFile(u":/icons/document-export-table.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionExport_frames.setIcon(icon39)
        self.actionDelete_frame = QAction(MainWindow)
        self.actionDelete_frame.setObjectName(u"actionDelete_frame")
        icon40 = QIcon()
        icon40.addFile(u":/icons/list-remove.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionDelete_frame.setIcon(icon40)
        self.actionGenerate_ticker_font = QAction(MainWindow)
        self.actionGenerate_ticker_font.setObjectName(u"actionGenerate_ticker_font")
        icon41 = QIcon()
        icon41.addFile(u":/icons/application-x-font-ttf.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionGenerate_ticker_font.setIcon(icon41)
        self.actionConnectUSB = QAction(MainWindow)
        self.actionConnectUSB.setObjectName(u"actionConnectUSB")
        icon42 = QIcon()
        icon42.addFile(u":/icons/drive-removable-media-usb.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionConnectUSB.setIcon(icon42)
        self.actionConnectBluetooth = QAction(MainWindow)
        self.actionConnectBluetooth.setObjectName(u"actionConnectBluetooth")
        icon43 = QIcon()
        icon43.addFile(u":/icons/preferences-system-bluetooth.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionConnectBluetooth.setIcon(icon43)
        self.actionDisconnect = QAction(MainWindow)
        self.actionDisconnect.setObjectName(u"actionDisconnect")
        self.actionDisconnect.setEnabled(False)
        icon44 = QIcon()
        icon44.addFile(u":/icons/network-disconnect.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionDisconnect.setIcon(icon44)
        self.actionAbout_Qt = QAction(MainWindow)
        self.actionAbout_Qt.setObjectName(u"actionAbout_Qt")
        icon45 = QIcon()
        icon45.addFile(u":/icons/QtProject-qtcreator.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionAbout_Qt.setIcon(icon45)
        self.actionAbout = QAction(MainWindow)
        self.actionAbout.setObjectName(u"actionAbout")
        icon46 = QIcon()
        icon46.addFile(u":/icons/dialog-information.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionAbout.setIcon(icon46)
        self.actionConnectEthernet = QAction(MainWindow)
        self.actionConnectEthernet.setObjectName(u"actionConnectEthernet")
        icon47 = QIcon()
        icon47.addFile(u":/icons/network-wired.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionConnectEthernet.setIcon(icon47)
        self.centralwidget = QWidget(MainWindow)
        self.centralwidget.setObjectName(u"centralwidget")
        sizePolicy.setHeightForWidth(self.centralwidget.sizePolicy().hasHeightForWidth())
        self.centralwidget.setSizePolicy(sizePolicy)
        self.gridLayout = QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName(u"gridLayout")
        self.horizontalLayout_3 = QHBoxLayout()
        self.horizontalLayout_3.setObjectName(u"horizontalLayout_3")
        self.horizontalLayout_3.setSizeConstraint(QLayout.SetMaximumSize)
        self.verticalLayout_4 = QVBoxLayout()
        self.verticalLayout_4.setSpacing(6)
        self.verticalLayout_4.setObjectName(u"verticalLayout_4")
        self.verticalLayout_4.setSizeConstraint(QLayout.SetDefaultConstraint)
        self.verticalLayout_4.setContentsMargins(-1, 0, -1, 0)
        self.graphicsView = GridGraphicsView(self.centralwidget)
        self.graphicsView.setObjectName(u"graphicsView")
        sizePolicy1 = QSizePolicy(QSizePolicy.Preferred, QSizePolicy.Preferred)
        sizePolicy1.setHorizontalStretch(0)
        sizePolicy1.setVerticalStretch(0)
        sizePolicy1.setHeightForWidth(self.graphicsView.sizePolicy().hasHeightForWidth())
        self.graphicsView.setSizePolicy(sizePolicy1)
        self.graphicsView.setMinimumSize(QSize(550, 550))
        self.graphicsView.setSizeIncrement(QSize(1, 1))
        self.graphicsView.viewport().setProperty("cursor", QCursor(Qt.PointingHandCursor))
        self.graphicsView.setFocusPolicy(Qt.StrongFocus)
        self.graphicsView.setAcceptDrops(False)
        self.graphicsView.setAutoFillBackground(False)
        self.graphicsView.setFrameShape(QFrame.StyledPanel)
        self.graphicsView.setFrameShadow(QFrame.Sunken)
        self.graphicsView.setVerticalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        self.graphicsView.setAlignment(Qt.AlignCenter)
        self.graphicsView.setDragMode(QGraphicsView.RubberBandDrag)
        self.graphicsView.setCacheMode(QGraphicsView.CacheNone)
        self.graphicsView.setRubberBandSelectionMode(Qt.IntersectsItemShape)

        self.verticalLayout_4.addWidget(self.graphicsView)

        self.frameSlider = QSlider(self.centralwidget)
        self.frameSlider.setObjectName(u"frameSlider")
        self.frameSlider.setMinimumSize(QSize(550, 0))
        self.frameSlider.setCursor(QCursor(Qt.PointingHandCursor))
        self.frameSlider.setMinimum(0)
        self.frameSlider.setMaximum(0)
        self.frameSlider.setOrientation(Qt.Horizontal)
        self.frameSlider.setInvertedAppearance(False)
        self.frameSlider.setInvertedControls(False)
        self.frameSlider.setTickPosition(QSlider.TicksBelow)
        self.frameSlider.setTickInterval(1)

        self.verticalLayout_4.addWidget(self.frameSlider)

        self.progressBar = QProgressBar(self.centralwidget)
        self.progressBar.setObjectName(u"progressBar")
        self.progressBar.setValue(24)

        self.verticalLayout_4.addWidget(self.progressBar)


        self.horizontalLayout_3.addLayout(self.verticalLayout_4)


        self.gridLayout.addLayout(self.horizontalLayout_3, 0, 0, 1, 1)

        MainWindow.setCentralWidget(self.centralwidget)
        self.toolBar = QToolBar(MainWindow)
        self.toolBar.setObjectName(u"toolBar")
        self.toolBar.setEnabled(True)
        self.toolBar.setLayoutDirection(Qt.LeftToRight)
        self.toolBar.setMovable(True)
        self.toolBar.setAllowedAreas(Qt.AllToolBarAreas)
        self.toolBar.setToolButtonStyle(Qt.ToolButtonIconOnly)
        self.toolBar.setFloatable(False)
        MainWindow.addToolBar(Qt.LeftToolBarArea, self.toolBar)
        self.menuBar = QMenuBar(MainWindow)
        self.menuBar.setObjectName(u"menuBar")
        self.menuBar.setGeometry(QRect(0, 0, 953, 30))
        self.menuBar.setDefaultUp(False)
        self.menuFile = QMenu(self.menuBar)
        self.menuFile.setObjectName(u"menuFile")
        self.menuFrames = QMenu(self.menuBar)
        self.menuFrames.setObjectName(u"menuFrames")
        self.menuFrames.setTearOffEnabled(False)
        self.menuFrames.setSeparatorsCollapsible(False)
        self.menuGo_to = QMenu(self.menuFrames)
        self.menuGo_to.setObjectName(u"menuGo_to")
        self.menuNew = QMenu(self.menuFrames)
        self.menuNew.setObjectName(u"menuNew")
        self.menuSelection = QMenu(self.menuBar)
        self.menuSelection.setObjectName(u"menuSelection")
        self.menuSelection.setTearOffEnabled(True)
        self.menuSelection.setSeparatorsCollapsible(False)
        self.menuShift = QMenu(self.menuSelection)
        self.menuShift.setObjectName(u"menuShift")
        self.menuEdit = QMenu(self.menuBar)
        self.menuEdit.setObjectName(u"menuEdit")
        self.menuEdit.setEnabled(False)
        self.menuEdit.setTearOffEnabled(False)
        self.menuEdit.setSeparatorsCollapsible(False)
        self.menuColoring = QMenu(self.menuBar)
        self.menuColoring.setObjectName(u"menuColoring")
        self.menuPlayer = QMenu(self.menuBar)
        self.menuPlayer.setObjectName(u"menuPlayer")
        self.menuConnect_to_device = QMenu(self.menuPlayer)
        self.menuConnect_to_device.setObjectName(u"menuConnect_to_device")
        icon48 = QIcon()
        icon48.addFile(u":/icons/network-connect.png", QSize(), QIcon.Normal, QIcon.Off)
        self.menuConnect_to_device.setIcon(icon48)
        self.menuGenerate = QMenu(self.menuBar)
        self.menuGenerate.setObjectName(u"menuGenerate")
        self.menuInfo = QMenu(self.menuBar)
        self.menuInfo.setObjectName(u"menuInfo")
        MainWindow.setMenuBar(self.menuBar)
        self.statusBar = QStatusBar(MainWindow)
        self.statusBar.setObjectName(u"statusBar")
        MainWindow.setStatusBar(self.statusBar)
        self.dockWidget = QDockWidget(MainWindow)
        self.dockWidget.setObjectName(u"dockWidget")
        font = QFont()
        font.setBold(True)
        font.setWeight(75)
        self.dockWidget.setFont(font)
        self.dockWidget.setFeatures(QDockWidget.DockWidgetFloatable|QDockWidget.DockWidgetMovable)
        self.dockWidget.setAllowedAreas(Qt.LeftDockWidgetArea|Qt.RightDockWidgetArea)
        self.dockWidgetContents = QWidget()
        self.dockWidgetContents.setObjectName(u"dockWidgetContents")
        self.gridLayout_2 = QGridLayout(self.dockWidgetContents)
        self.gridLayout_2.setObjectName(u"gridLayout_2")
        self.verticalLayout_3 = QVBoxLayout()
        self.verticalLayout_3.setObjectName(u"verticalLayout_3")
        self.verticalLayout_3.setSizeConstraint(QLayout.SetMinimumSize)
        self.colorBox = QGroupBox(self.dockWidgetContents)
        self.colorBox.setObjectName(u"colorBox")
        self.verticalLayout_5 = QVBoxLayout(self.colorBox)
        self.verticalLayout_5.setObjectName(u"verticalLayout_5")
        self.verticalLayout_2 = QVBoxLayout()
        self.verticalLayout_2.setObjectName(u"verticalLayout_2")
        self.horizontalLayout = QHBoxLayout()
        self.horizontalLayout.setObjectName(u"horizontalLayout")
        self.colorButton = QPushButton(self.colorBox)
        self.colorButton.setObjectName(u"colorButton")
        sizePolicy2 = QSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
        sizePolicy2.setHorizontalStretch(0)
        sizePolicy2.setVerticalStretch(0)
        sizePolicy2.setHeightForWidth(self.colorButton.sizePolicy().hasHeightForWidth())
        self.colorButton.setSizePolicy(sizePolicy2)
        font1 = QFont()
        font1.setBold(False)
        font1.setWeight(50)
        self.colorButton.setFont(font1)
        self.colorButton.setAutoFillBackground(False)
        self.colorButton.setIcon(icon15)
        self.colorButton.setAutoDefault(False)
        self.colorButton.setFlat(False)

        self.horizontalLayout.addWidget(self.colorButton)

        self.colorWidget = QFrame(self.colorBox)
        self.colorWidget.setObjectName(u"colorWidget")
        self.colorWidget.setMinimumSize(QSize(30, 0))
        self.colorWidget.setFrameShape(QFrame.Box)
        self.colorWidget.setFrameShadow(QFrame.Raised)

        self.horizontalLayout.addWidget(self.colorWidget)


        self.verticalLayout_2.addLayout(self.horizontalLayout)

        self.tintButton = QPushButton(self.colorBox)
        self.tintButton.setObjectName(u"tintButton")
        sizePolicy2.setHeightForWidth(self.tintButton.sizePolicy().hasHeightForWidth())
        self.tintButton.setSizePolicy(sizePolicy2)
        self.tintButton.setFont(font1)
        self.tintButton.setIcon(icon16)
        self.tintButton.setFlat(False)

        self.verticalLayout_2.addWidget(self.tintButton)


        self.verticalLayout_5.addLayout(self.verticalLayout_2)


        self.verticalLayout_3.addWidget(self.colorBox)

        self.currentFrameBox = QGroupBox(self.dockWidgetContents)
        self.currentFrameBox.setObjectName(u"currentFrameBox")
        self.verticalLayout_9 = QVBoxLayout(self.currentFrameBox)
        self.verticalLayout_9.setObjectName(u"verticalLayout_9")
        self.verticalLayout = QVBoxLayout()
        self.verticalLayout.setObjectName(u"verticalLayout")
        self.label = QLabel(self.currentFrameBox)
        self.label.setObjectName(u"label")
        self.label.setFont(font1)

        self.verticalLayout.addWidget(self.label)

        self.durationSpinBox = QSpinBox(self.currentFrameBox)
        self.durationSpinBox.setObjectName(u"durationSpinBox")
        sizePolicy2.setHeightForWidth(self.durationSpinBox.sizePolicy().hasHeightForWidth())
        self.durationSpinBox.setSizePolicy(sizePolicy2)
        self.durationSpinBox.setMinimumSize(QSize(0, 25))
        self.durationSpinBox.setFont(font1)
        self.durationSpinBox.setMaximum(99999)
        self.durationSpinBox.setSingleStep(10)
        self.durationSpinBox.setValue(100)

        self.verticalLayout.addWidget(self.durationSpinBox)

        self.durationButton = QPushButton(self.currentFrameBox)
        self.durationButton.setObjectName(u"durationButton")
        self.durationButton.setMinimumSize(QSize(0, 25))
        self.durationButton.setFont(font1)
        self.durationButton.setFocusPolicy(Qt.TabFocus)

        self.verticalLayout.addWidget(self.durationButton)


        self.verticalLayout_9.addLayout(self.verticalLayout)


        self.verticalLayout_3.addWidget(self.currentFrameBox)

        self.playerBox = QGroupBox(self.dockWidgetContents)
        self.playerBox.setObjectName(u"playerBox")
        self.verticalLayout_10 = QVBoxLayout(self.playerBox)
        self.verticalLayout_10.setObjectName(u"verticalLayout_10")
        self.verticalLayout_6 = QVBoxLayout()
        self.verticalLayout_6.setObjectName(u"verticalLayout_6")
        self.loopCheckbox = QCheckBox(self.playerBox)
        self.loopCheckbox.setObjectName(u"loopCheckbox")
        font2 = QFont()
        font2.setBold(False)
        font2.setItalic(False)
        font2.setUnderline(False)
        font2.setWeight(50)
        self.loopCheckbox.setFont(font2)
        self.loopCheckbox.setLayoutDirection(Qt.LeftToRight)
        self.loopCheckbox.setAutoFillBackground(False)
        self.loopCheckbox.setTristate(False)

        self.verticalLayout_6.addWidget(self.loopCheckbox)

        self.playButton = QToolButton(self.playerBox)
        self.playButton.setObjectName(u"playButton")
        sizePolicy2.setHeightForWidth(self.playButton.sizePolicy().hasHeightForWidth())
        self.playButton.setSizePolicy(sizePolicy2)
        self.playButton.setMinimumSize(QSize(0, 25))
        self.playButton.setFont(font1)
        self.playButton.setLayoutDirection(Qt.LeftToRight)
        self.playButton.setPopupMode(QToolButton.DelayedPopup)
        self.playButton.setToolButtonStyle(Qt.ToolButtonFollowStyle)
        self.playButton.setAutoRaise(False)
        self.playButton.setArrowType(Qt.NoArrow)

        self.verticalLayout_6.addWidget(self.playButton)

        self.playOnDeviceButton = QToolButton(self.playerBox)
        self.playOnDeviceButton.setObjectName(u"playOnDeviceButton")
        sizePolicy2.setHeightForWidth(self.playOnDeviceButton.sizePolicy().hasHeightForWidth())
        self.playOnDeviceButton.setSizePolicy(sizePolicy2)
        self.playOnDeviceButton.setMinimumSize(QSize(0, 25))
        self.playOnDeviceButton.setFont(font1)
        self.playOnDeviceButton.setToolButtonStyle(Qt.ToolButtonTextBesideIcon)
        self.playOnDeviceButton.setAutoRaise(False)

        self.verticalLayout_6.addWidget(self.playOnDeviceButton)


        self.verticalLayout_10.addLayout(self.verticalLayout_6)


        self.verticalLayout_3.addWidget(self.playerBox)


        self.gridLayout_2.addLayout(self.verticalLayout_3, 0, 0, 1, 1)

        self.infoBox = QGroupBox(self.dockWidgetContents)
        self.infoBox.setObjectName(u"infoBox")
        self.verticalLayout_11 = QVBoxLayout(self.infoBox)
        self.verticalLayout_11.setObjectName(u"verticalLayout_11")
        self.verticalLayout_7 = QVBoxLayout()
        self.verticalLayout_7.setObjectName(u"verticalLayout_7")
        self.metaInfoTable = QTableWidget(self.infoBox)
        if (self.metaInfoTable.columnCount() < 2):
            self.metaInfoTable.setColumnCount(2)
        __qtablewidgetitem = QTableWidgetItem()
        __qtablewidgetitem.setFont(font);
        self.metaInfoTable.setHorizontalHeaderItem(0, __qtablewidgetitem)
        __qtablewidgetitem1 = QTableWidgetItem()
        self.metaInfoTable.setHorizontalHeaderItem(1, __qtablewidgetitem1)
        self.metaInfoTable.setObjectName(u"metaInfoTable")
        self.metaInfoTable.setMaximumSize(QSize(16777215, 16777215))
        self.metaInfoTable.setFont(font1)
        self.metaInfoTable.setFrameShape(QFrame.StyledPanel)
        self.metaInfoTable.setFrameShadow(QFrame.Sunken)
        self.metaInfoTable.setMidLineWidth(1)
        self.metaInfoTable.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        self.metaInfoTable.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        self.metaInfoTable.setSelectionMode(QAbstractItemView.NoSelection)
        self.metaInfoTable.setGridStyle(Qt.SolidLine)
        self.metaInfoTable.setColumnCount(2)
        self.metaInfoTable.horizontalHeader().setMinimumSectionSize(20)
        self.metaInfoTable.horizontalHeader().setStretchLastSection(True)
        self.metaInfoTable.verticalHeader().setStretchLastSection(False)

        self.verticalLayout_7.addWidget(self.metaInfoTable)


        self.verticalLayout_11.addLayout(self.verticalLayout_7)


        self.gridLayout_2.addWidget(self.infoBox, 1, 0, 1, 1)

        self.dockWidget.setWidget(self.dockWidgetContents)
        MainWindow.addDockWidget(Qt.RightDockWidgetArea, self.dockWidget)

        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionGo_to_previous_frame)
        self.toolBar.addAction(self.actionGo_to_next_frame)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionCreate_new_frame)
        self.toolBar.addAction(self.actionDuplicate_frame)
        self.toolBar.addAction(self.actionDelete_frame)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionRotate_right)
        self.toolBar.addAction(self.actionRotate_left)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionZoom_out)
        self.toolBar.addAction(self.actionZoom_in)
        self.toolBar.addAction(self.actionFit_zoom)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionSelect_all)
        self.toolBar.addAction(self.actionDeselect_all)
        self.toolBar.addAction(self.actionCut_Selection)
        self.toolBar.addAction(self.actionPaste)
        self.menuBar.addAction(self.menuFile.menuAction())
        self.menuBar.addAction(self.menuEdit.menuAction())
        self.menuBar.addAction(self.menuFrames.menuAction())
        self.menuBar.addAction(self.menuSelection.menuAction())
        self.menuBar.addAction(self.menuColoring.menuAction())
        self.menuBar.addAction(self.menuGenerate.menuAction())
        self.menuBar.addAction(self.menuPlayer.menuAction())
        self.menuBar.addAction(self.menuInfo.menuAction())
        self.menuFile.addAction(self.actionNew)
        self.menuFile.addAction(self.actionLoad_BLM)
        self.menuFile.addAction(self.actionSave)
        self.menuFile.addAction(self.actionSave_as)
        self.menuFile.addAction(self.actionExport_frames)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionExit)
        self.menuFrames.addAction(self.menuNew.menuAction())
        self.menuFrames.addAction(self.actionDelete_frame)
        self.menuFrames.addSeparator()
        self.menuFrames.addAction(self.actionRotate_right)
        self.menuFrames.addAction(self.actionRotate_left)
        self.menuFrames.addSeparator()
        self.menuFrames.addAction(self.actionExport_frame)
        self.menuFrames.addSeparator()
        self.menuFrames.addAction(self.menuGo_to.menuAction())
        self.menuFrames.addAction(self.actionPersist_changes)
        self.menuGo_to.addAction(self.actionGo_to_previous_frame)
        self.menuGo_to.addAction(self.actionGo_to_next_frame)
        self.menuGo_to.addAction(self.actionGo_to_frame)
        self.menuNew.addAction(self.actionCreate_new_frame)
        self.menuNew.addAction(self.actionDuplicate_frame)
        self.menuNew.addAction(self.actionImport_from_image)
        self.menuSelection.addAction(self.actionSelect_all)
        self.menuSelection.addAction(self.actionDeselect_all)
        self.menuSelection.addSeparator()
        self.menuSelection.addAction(self.actionInvert_selection)
        self.menuSelection.addAction(self.actionSelect_by_color)
        self.menuSelection.addSeparator()
        self.menuSelection.addAction(self.actionDelete_colors)
        self.menuSelection.addAction(self.actionCopy_Selection)
        self.menuSelection.addAction(self.actionCut_Selection)
        self.menuSelection.addAction(self.actionPaste)
        self.menuSelection.addSeparator()
        self.menuSelection.addAction(self.menuShift.menuAction())
        self.menuShift.addAction(self.actionShift_left)
        self.menuShift.addAction(self.actionShift_right)
        self.menuShift.addAction(self.actionShift_content_up)
        self.menuShift.addAction(self.actionShift_content_down)
        self.menuEdit.addAction(self.actionUndo)
        self.menuColoring.addAction(self.actionChoose_color)
        self.menuColoring.addAction(self.actionTint_selected_tiles)
        self.menuColoring.addAction(self.actionRandomize_selected_tiles)
        self.menuPlayer.addAction(self.menuConnect_to_device.menuAction())
        self.menuPlayer.addAction(self.actionPlayStopDevice)
        self.menuPlayer.addAction(self.actionDisconnect)
        self.menuPlayer.addSeparator()
        self.menuPlayer.addAction(self.actionPlayStop)
        self.menuConnect_to_device.addAction(self.actionConnectUSB)
        self.menuConnect_to_device.addAction(self.actionConnectBluetooth)
        self.menuConnect_to_device.addAction(self.actionConnectEthernet)
        self.menuGenerate.addAction(self.actionGenerate_color_gradient)
        self.menuGenerate.addAction(self.actionGenerate_function)
        self.menuGenerate.addAction(self.actionGenerate_ticker_font)
        self.menuInfo.addAction(self.actionAbout)
        self.menuInfo.addAction(self.actionAbout_Qt)

        self.retranslateUi(MainWindow)

        self.colorButton.setDefault(False)


        QMetaObject.connectSlotsByName(MainWindow)
    # setupUi

    def retranslateUi(self, MainWindow):
        MainWindow.setWindowTitle(QCoreApplication.translate("MainWindow", u"Blink", None))
        self.actionCreate_new_frame.setText(QCoreApplication.translate("MainWindow", u"&Empty frame", None))
#if QT_CONFIG(shortcut)
        self.actionCreate_new_frame.setShortcut(QCoreApplication.translate("MainWindow", u"F", None))
#endif // QT_CONFIG(shortcut)
        self.actionExit.setText(QCoreApplication.translate("MainWindow", u"E&xit", None))
#if QT_CONFIG(shortcut)
        self.actionExit.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Q", None))
#endif // QT_CONFIG(shortcut)
        self.actionLoad_BLM.setText(QCoreApplication.translate("MainWindow", u"&Load BLM", None))
#if QT_CONFIG(tooltip)
        self.actionLoad_BLM.setToolTip(QCoreApplication.translate("MainWindow", u"Load BML", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(shortcut)
        self.actionLoad_BLM.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+L", None))
#endif // QT_CONFIG(shortcut)
        self.actionDuplicate_frame.setText(QCoreApplication.translate("MainWindow", u"&Duplicate current frame", None))
#if QT_CONFIG(shortcut)
        self.actionDuplicate_frame.setShortcut(QCoreApplication.translate("MainWindow", u"D", None))
#endif // QT_CONFIG(shortcut)
        self.actionPlayStop.setText(QCoreApplication.translate("MainWindow", u"&Play preview", None))
#if QT_CONFIG(shortcut)
        self.actionPlayStop.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+P", None))
#endif // QT_CONFIG(shortcut)
        self.actionNew.setText(QCoreApplication.translate("MainWindow", u"&New", None))
#if QT_CONFIG(shortcut)
        self.actionNew.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+N", None))
#endif // QT_CONFIG(shortcut)
        self.actionSave_as.setText(QCoreApplication.translate("MainWindow", u"&Save as...", None))
        self.actionSave_as.setIconText(QCoreApplication.translate("MainWindow", u"Save as...", None))
#if QT_CONFIG(tooltip)
        self.actionSave_as.setToolTip(QCoreApplication.translate("MainWindow", u"Save as...", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(shortcut)
        self.actionSave_as.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+S", None))
#endif // QT_CONFIG(shortcut)
        self.actionGo_to_previous_frame.setText(QCoreApplication.translate("MainWindow", u"&Previous frame", None))
#if QT_CONFIG(shortcut)
        self.actionGo_to_previous_frame.setShortcut(QCoreApplication.translate("MainWindow", u"P", None))
#endif // QT_CONFIG(shortcut)
        self.actionGo_to_next_frame.setText(QCoreApplication.translate("MainWindow", u"&Next frame", None))
#if QT_CONFIG(shortcut)
        self.actionGo_to_next_frame.setShortcut(QCoreApplication.translate("MainWindow", u"N", None))
#endif // QT_CONFIG(shortcut)
        self.actionSelect_all.setText(QCoreApplication.translate("MainWindow", u"Select &all", None))
#if QT_CONFIG(shortcut)
        self.actionSelect_all.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+A", None))
#endif // QT_CONFIG(shortcut)
        self.actionDeselect_all.setText(QCoreApplication.translate("MainWindow", u"&Deselect all", None))
#if QT_CONFIG(shortcut)
        self.actionDeselect_all.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Shift+A", None))
#endif // QT_CONFIG(shortcut)
        self.actionInvert_selection.setText(QCoreApplication.translate("MainWindow", u"&Invert", None))
#if QT_CONFIG(shortcut)
        self.actionInvert_selection.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+I", None))
#endif // QT_CONFIG(shortcut)
        self.actionSelect_by_color.setText(QCoreApplication.translate("MainWindow", u"Select by &color", None))
#if QT_CONFIG(shortcut)
        self.actionSelect_by_color.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Shift+C", None))
#endif // QT_CONFIG(shortcut)
        self.actionUndo.setText(QCoreApplication.translate("MainWindow", u"&Undo", None))
#if QT_CONFIG(shortcut)
        self.actionUndo.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Z", None))
#endif // QT_CONFIG(shortcut)
        self.actionChoose_color.setText(QCoreApplication.translate("MainWindow", u"Choose &color", None))
#if QT_CONFIG(shortcut)
        self.actionChoose_color.setShortcut(QCoreApplication.translate("MainWindow", u"C", None))
#endif // QT_CONFIG(shortcut)
        self.actionTint_selected_tiles.setText(QCoreApplication.translate("MainWindow", u"&Tint selected tiles", None))
#if QT_CONFIG(shortcut)
        self.actionTint_selected_tiles.setShortcut(QCoreApplication.translate("MainWindow", u"T", None))
#endif // QT_CONFIG(shortcut)
        self.actionShift_left.setText(QCoreApplication.translate("MainWindow", u"Left", None))
#if QT_CONFIG(tooltip)
        self.actionShift_left.setToolTip(QCoreApplication.translate("MainWindow", u"Shift content left", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(shortcut)
        self.actionShift_left.setShortcut(QCoreApplication.translate("MainWindow", u"Shift+Left", None))
#endif // QT_CONFIG(shortcut)
        self.actionShift_right.setText(QCoreApplication.translate("MainWindow", u"Right", None))
#if QT_CONFIG(shortcut)
        self.actionShift_right.setShortcut(QCoreApplication.translate("MainWindow", u"Shift+Right", None))
#endif // QT_CONFIG(shortcut)
        self.actionPlayStopDevice.setText(QCoreApplication.translate("MainWindow", u"Play on device", None))
#if QT_CONFIG(shortcut)
        self.actionPlayStopDevice.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Return", None))
#endif // QT_CONFIG(shortcut)
        self.actionRandomize_selected_tiles.setText(QCoreApplication.translate("MainWindow", u"Randomize selected tiles", None))
#if QT_CONFIG(shortcut)
        self.actionRandomize_selected_tiles.setShortcut(QCoreApplication.translate("MainWindow", u"Z", None))
#endif // QT_CONFIG(shortcut)
        self.actionShift_content_up.setText(QCoreApplication.translate("MainWindow", u"Up", None))
#if QT_CONFIG(shortcut)
        self.actionShift_content_up.setShortcut(QCoreApplication.translate("MainWindow", u"Shift+Up", None))
#endif // QT_CONFIG(shortcut)
        self.actionShift_content_down.setText(QCoreApplication.translate("MainWindow", u"Down", None))
#if QT_CONFIG(shortcut)
        self.actionShift_content_down.setShortcut(QCoreApplication.translate("MainWindow", u"Shift+Down", None))
#endif // QT_CONFIG(shortcut)
        self.actionCopy_Selection.setText(QCoreApplication.translate("MainWindow", u"Copy colors", None))
#if QT_CONFIG(shortcut)
        self.actionCopy_Selection.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+C", None))
#endif // QT_CONFIG(shortcut)
        self.actionPaste.setText(QCoreApplication.translate("MainWindow", u"Paste selection", None))
#if QT_CONFIG(shortcut)
        self.actionPaste.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+V", None))
#endif // QT_CONFIG(shortcut)
        self.actionPersist_changes.setText(QCoreApplication.translate("MainWindow", u"Persist changes", None))
#if QT_CONFIG(shortcut)
        self.actionPersist_changes.setShortcut(QCoreApplication.translate("MainWindow", u"Return", None))
#endif // QT_CONFIG(shortcut)
        self.actionCut_Selection.setText(QCoreApplication.translate("MainWindow", u"Cut colors", None))
#if QT_CONFIG(shortcut)
        self.actionCut_Selection.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+X", None))
#endif // QT_CONFIG(shortcut)
        self.actionExport_frame.setText(QCoreApplication.translate("MainWindow", u"Export as image", None))
        self.actionGenerate_color_gradient.setText(QCoreApplication.translate("MainWindow", u"Color gradient", None))
        self.actionSave.setText(QCoreApplication.translate("MainWindow", u"Save", None))
        self.actionGo_to_frame.setText(QCoreApplication.translate("MainWindow", u"Enter frame...", None))
#if QT_CONFIG(shortcut)
        self.actionGo_to_frame.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+F", None))
#endif // QT_CONFIG(shortcut)
        self.actionZoom_in.setText(QCoreApplication.translate("MainWindow", u"Zoom in", None))
#if QT_CONFIG(shortcut)
        self.actionZoom_in.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+=", None))
#endif // QT_CONFIG(shortcut)
        self.actionZoom_out.setText(QCoreApplication.translate("MainWindow", u"Zoom out", None))
#if QT_CONFIG(shortcut)
        self.actionZoom_out.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+-", None))
#endif // QT_CONFIG(shortcut)
        self.actionFit_zoom.setText(QCoreApplication.translate("MainWindow", u"Fit zoom", None))
#if QT_CONFIG(shortcut)
        self.actionFit_zoom.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+0", None))
#endif // QT_CONFIG(shortcut)
        self.actionGenerate_function.setText(QCoreApplication.translate("MainWindow", u"Function", None))
        self.actionImport_from_image.setText(QCoreApplication.translate("MainWindow", u"Import from image", None))
        self.actionRotate_right.setText(QCoreApplication.translate("MainWindow", u"Rotate right", None))
#if QT_CONFIG(shortcut)
        self.actionRotate_right.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Right", None))
#endif // QT_CONFIG(shortcut)
        self.actionRotate_left.setText(QCoreApplication.translate("MainWindow", u"Rotate left", None))
#if QT_CONFIG(shortcut)
        self.actionRotate_left.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Left", None))
#endif // QT_CONFIG(shortcut)
        self.actionDelete_colors.setText(QCoreApplication.translate("MainWindow", u"D&elete colors", None))
#if QT_CONFIG(shortcut)
        self.actionDelete_colors.setShortcut(QCoreApplication.translate("MainWindow", u"Del", None))
#endif // QT_CONFIG(shortcut)
        self.actionExport_frames.setText(QCoreApplication.translate("MainWindow", u"Export frames", None))
        self.actionDelete_frame.setText(QCoreApplication.translate("MainWindow", u"Remove", None))
#if QT_CONFIG(shortcut)
        self.actionDelete_frame.setShortcut(QCoreApplication.translate("MainWindow", u"R", None))
#endif // QT_CONFIG(shortcut)
        self.actionGenerate_ticker_font.setText(QCoreApplication.translate("MainWindow", u"Ticker text", None))
        self.actionConnectUSB.setText(QCoreApplication.translate("MainWindow", u"USB", None))
        self.actionConnectBluetooth.setText(QCoreApplication.translate("MainWindow", u"Bluetooth", None))
        self.actionDisconnect.setText(QCoreApplication.translate("MainWindow", u"Disconnect", None))
        self.actionAbout_Qt.setText(QCoreApplication.translate("MainWindow", u"About Qt", None))
        self.actionAbout.setText(QCoreApplication.translate("MainWindow", u"Blink", None))
        self.actionConnectEthernet.setText(QCoreApplication.translate("MainWindow", u"Ethernet", None))
#if QT_CONFIG(statustip)
        self.graphicsView.setStatusTip("")
#endif // QT_CONFIG(statustip)
#if QT_CONFIG(whatsthis)
        self.graphicsView.setWhatsThis(QCoreApplication.translate("MainWindow", u"(CTRL+) Left-click to select a tile, right-click to tint", None))
#endif // QT_CONFIG(whatsthis)
        self.progressBar.setFormat(QCoreApplication.translate("MainWindow", u"%p% (Frame %v/%m)", None))
        self.toolBar.setWindowTitle(QCoreApplication.translate("MainWindow", u"Toolbar", None))
        self.menuFile.setTitle(QCoreApplication.translate("MainWindow", u"&File", None))
        self.menuFrames.setTitle(QCoreApplication.translate("MainWindow", u"&Frame", None))
        self.menuGo_to.setTitle(QCoreApplication.translate("MainWindow", u"&Go to...", None))
        self.menuNew.setTitle(QCoreApplication.translate("MainWindow", u"New", None))
        self.menuSelection.setTitle(QCoreApplication.translate("MainWindow", u"&Selection", None))
        self.menuShift.setTitle(QCoreApplication.translate("MainWindow", u"&Shift", None))
        self.menuEdit.setTitle(QCoreApplication.translate("MainWindow", u"&Edit", None))
        self.menuColoring.setTitle(QCoreApplication.translate("MainWindow", u"&Coloring", None))
        self.menuPlayer.setTitle(QCoreApplication.translate("MainWindow", u"&Player", None))
        self.menuConnect_to_device.setTitle(QCoreApplication.translate("MainWindow", u"Connect to device", None))
        self.menuGenerate.setTitle(QCoreApplication.translate("MainWindow", u"Generate", None))
        self.menuInfo.setTitle(QCoreApplication.translate("MainWindow", u"Info", None))
        self.dockWidget.setWindowTitle(QCoreApplication.translate("MainWindow", u"Settings", None))
        self.colorBox.setTitle(QCoreApplication.translate("MainWindow", u"Color", None))
        self.colorButton.setText("")
        self.tintButton.setText(QCoreApplication.translate("MainWindow", u"Tint selected tiles", None))
        self.currentFrameBox.setTitle(QCoreApplication.translate("MainWindow", u"Current Frame", None))
        self.label.setText(QCoreApplication.translate("MainWindow", u"Duration (ms)", None))
        self.durationButton.setText(QCoreApplication.translate("MainWindow", u"Apply for all frames", None))
        self.playerBox.setTitle(QCoreApplication.translate("MainWindow", u"Player", None))
        self.loopCheckbox.setText(QCoreApplication.translate("MainWindow", u"Loop playback", None))
        self.playButton.setText(QCoreApplication.translate("MainWindow", u"Playback", None))
        self.playOnDeviceButton.setText(QCoreApplication.translate("MainWindow", u"Playback on Device", None))
        self.infoBox.setTitle(QCoreApplication.translate("MainWindow", u"File information", None))
        ___qtablewidgetitem = self.metaInfoTable.horizontalHeaderItem(0)
        ___qtablewidgetitem.setText(QCoreApplication.translate("MainWindow", u"Property", None));
        ___qtablewidgetitem1 = self.metaInfoTable.horizontalHeaderItem(1)
        ___qtablewidgetitem1.setText(QCoreApplication.translate("MainWindow", u"Value", None));
    # retranslateUi

